Digite docker vai apresentar diversos comandos, por exemplo: Run 'docker COMMAND --help' for more information on a command

Usage:  docker [OPTIONS] COMMAND

A self-sufficient runtime for containers

Options:
      --config string      Location of client config files (default
                           "C:\\Users\\Aldo\\.docker")
  -c, --context string     Name of the context to use to connect to the
                           daemon (overrides DOCKER_HOST env var and
                           default context set with "docker context use")
  -D, --debug              Enable debug mode
  -H, --host list          Daemon socket(s) to connect to
  -l, --log-level string   Set the logging level
                           ("debug"|"info"|"warn"|"error"|"fatal")
                           (default "info")
      --tls                Use TLS; implied by --tlsverify
      --tlscacert string   Trust certs signed only by this CA (default
                           "C:\\Users\\Aldo\\.docker\\ca.pem")
      --tlscert string     Path to TLS certificate file (default
                           "C:\\Users\\Aldo\\.docker\\cert.pem")
      --tlskey string      Path to TLS key file (default
                           "C:\\Users\\Aldo\\.docker\\key.pem")
      --tlsverify          Use TLS and verify the remote
  -v, --version            Print version

Management Commands:
  app*        Docker Application (Docker Inc., v0.8.0)
  builder     Manage builds
  buildx*     Build with BuildKit (Docker Inc., v0.4.2-tp-docker)
  config      Manage Docker configs
  container   Manage containers
  context     Manage contexts
  image       Manage images
  manifest    Manage Docker image manifests and manifest lists
  network     Manage networks
  node        Manage Swarm nodes
  plugin      Manage plugins
  scan*       Docker Scan (Docker Inc., v0.3.4)
  secret      Manage Docker secrets
  service     Manage services
  stack       Manage Docker stacks
  swarm       Manage Swarm
  system      Manage Docker
  trust       Manage trust on Docker images
  volume      Manage volumes

Commands:
  attach      Attach local standard input, output, and error streams to a running container
  build       Build an image from a Dockerfile
  commit      Create a new image from a container's changes
  cp          Copy files/folders between a container and the local filesystem
  create      Create a new container
  diff        Inspect changes to files or directories on a container's filesystem
  events      Get real time events from the server
  exec        Run a command in a running container
  export      Export a container's filesystem as a tar archive
  history     Show the history of an image
  images      List images
  import      Import the contents from a tarball to create a filesystem image
  info        Display system-wide information
  inspect     Return low-level information on Docker objects
  kill        Kill one or more running containers
  load        Load an image from a tar archive or STDIN
  login       Log in to a Docker registry
  logout      Log out from a Docker registry
  logs        Fetch the logs of a container
  pause       Pause all processes within one or more containers
  port        List port mappings or a specific mapping for the container
  ps          List containers
  pull        Pull an image or a repository from a registry
  push        Push an image or a repository to a registry
  rename      Rename a container
  restart     Restart one or more containers
  rm          Remove one or more containers
  rmi         Remove one or more images
  run         Run a command in a new container
  save        Save one or more images to a tar archive (streamed to STDOUT by default)
  search      Search the Docker Hub for images
  start       Start one or more stopped containers
  stats       Display a live stream of container(s) resource usage statistics
  stop        Stop one or more running containers
  tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE
  top         Display the running processes of a container
  unpause     Unpause all processes within one or more containers
  update      Update configuration of one or more containers
  version     Show the Docker version information
  wait        Block until one or more containers stop, then print their exit codes

Run 'docker COMMAND --help' for more information on a command.

Versão instalada em 21/11/2020; C:\Users\Aldo>docker --version
Docker version 19.03.13, build 4484c46d9d

Ferramentas Diferentes

Para descobrimos a versão do Bash instalada:
C:\Users\Aldo>bash --version
GNU bash, version 4.4.19(1)-release (x86_64-alpine-linux-musl)
Copyright (C) 2016 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>

This is free software; you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Para baixar uma imagem: neste caso debian, não usar o bash da maquina Host, vai baixar um bash para a maquina linux que será baixada.
C:\Users\Aldo>docker container run debian bash --version

C:\Users\Aldo>docker container run debian bash --version
Unable to find image 'debian:latest' locally
latest: Pulling from library/debian
756975cb9c7e: Pull complete
Digest: sha256:e2cc6fb403be437ef8af68bdc3a89fd58e80b4e390c58f14c77c466002391193
Status: Downloaded newer image for debian:latest
GNU bash, version 5.0.3(1)-release (x86_64-pc-linux-gnu)
Copyright (C) 2019 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>

This is free software; you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Para mostrar os container ativos no momento:
C:\Users\Aldo>docker container ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES

Como não tem nenhum, a resposta é vazia.

Mostar todo os container que foram baixados e ou executados idependente dos estados e também os que possam estar pausados.
C:\Users\Aldo>docker container ps -a
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                      PORTS               NAMES
53840578ff91        debian              "bash --version"    4 minutes ago       Exited (0) 4 minutes ago                        amazing_gates
31128144e7d9        hello-world         "/hello"            24 minutes ago      Exited (0) 24 minutes ago                       practical_feynman

O --rm remove da lista, assim ao chamr o run e incluir o --rm ele exclui este ultimo run (bo caso debian) então a lista permanece 
igual.
C:\Users\Aldo>docker container run --rm debian

C:\Users\Aldo>docker container run --rm debian bash --version
GNU bash, version 5.0.3(1)-release (x86_64-pc-linux-gnu)
Copyright (C) 2019 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>

This is free software; you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

O metodo run sempre cria um novo container ao ser utilizado, então ao utilizar o -it (seria -i-interativo; e -t-terminal) para 
termos acesso ao terminal do container. 

C:\Users\Aldo>docker container run -it debian bash
root@d6cc08e7b7ad:/#

O camando touch cria um novo arquivo, 
C:\Users\Aldo>docker container run -it debian bash
root@d6cc08e7b7ad:/# touch curso-docker.txt
root@d6cc08e7b7ad:/#
Para listarmos os arquivos criados:
C:\Users\Aldo>docker container run -it debian bash
root@d6cc08e7b7ad:/# touch curso-docker.txt
root@d6cc08e7b7ad:/#
Para sair: root@d6cc08e7b7ad:/# exit
exit

C:\Users\Aldo>docker container run -it debian bash
root@d6cc08e7b7ad:/# touch curso-docker.txt
root@d6cc08e7b7ad:/# ls curso-docker.txt
curso-docker.txt
root@d6cc08e7b7ad:/# exit
exit

Para verificar que o arquivo esta no container anterior, criamos outro container

C:\Users\Aldo>docker container run -it debian bash
root@7564c1517473:/# ls curso-docker.txt
ls: cannot access 'curso-docker.txt': No such file or directory
root@7564c1517473:/#

C:\Users\Aldo>docker container ps -a
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                         PORTS               NAMES
7564c1517473        debian              "bash"              3 minutes ago       Exited (2) 21 seconds ago                          vibrant_wright
d6cc08e7b7ad        debian              "bash"              7 minutes ago       Exited (0) 4 minutes ago                           fervent_hofstadter
53840578ff91        debian              "bash --version"    58 minutes ago      Exited (0) 58 minutes ago                          amazing_gates
31128144e7d9        hello-world         "/hello"            About an hour ago   Exited (0) About an hour ago                       practical_feynman

Pode-se observar que o docker nomeia os container por padrão, mas é possível renomear: vibrant_wright - renomear...

C:\Users\Aldo>docker container run --name mydeb -it debian bash
root@4c365e146d03:/# exit
exit
Criamos um novo container com o nome "mydeb"

É possível reutilizar um container, então primeiro listamos todos os containers:
C:\Users\Aldo>docker container ls -a
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                         PORTS               NAMES
4c365e146d03        debian              "bash"              4 minutes ago       Exited (0) 3 minutes ago                           mydeb
7564c1517473        debian              "bash"              15 minutes ago      Exited (2) 12 minutes ago                          vibrant_wright
d6cc08e7b7ad        debian              "bash"              20 minutes ago      Exited (0) 16 minutes ago                          fervent_hofstadter
53840578ff91        debian              "bash --version"    About an hour ago   Exited (0) About an hour ago                       amazing_gates
31128144e7d9        hello-world         "/hello"            2 hours ago         Exited (0) 2 hours ago                             practical_feynman

Iniciamos um container com -ai (anexar um terminal interativo):
C:\Users\Aldo>docker container start -ai mydeb

C:\Users\Aldo>docker container start -ai mydeb
root@4c365e146d03:/# touch curso-docker.txt
root@4c365e146d03:/# ls
bin  boot  curso-docker.txt  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var
root@4c365e146d03:/# exit
exit

Isolamento controlado, podendo expor uma porta para troca de arquivos. Assim é possível mapear portas, e para isto baixamos 
um servidor nginx. 

C:\Users\Aldo>docker container run -p 8080:80 nginx
Unable to find image 'nginx:latest' locally
latest: Pulling from library/nginx
852e50cd189d: Pull complete
a29b129f4109: Pull complete
b3ddf1fa5595: Pull complete
c5df295936d3: Pull complete
232bf38931fc: Pull complete
Digest: sha256:c3a1592d2b6d275bef4087573355827b200b00ffc2d9849890a4f3aa2128c4ae
Status: Downloaded newer image for nginx:latest
/docker-entrypoint.sh: /docker-entrypoint.d/ is not empty, will attempt to perform configuration
/docker-entrypoint.sh: Looking for shell scripts in /docker-entrypoint.d/
/docker-entrypoint.sh: Launching /docker-entrypoint.d/10-listen-on-ipv6-by-default.sh
10-listen-on-ipv6-by-default.sh: Getting the checksum of /etc/nginx/conf.d/default.conf
10-listen-on-ipv6-by-default.sh: Enabled listen on IPv6 in /etc/nginx/conf.d/default.conf
/docker-entrypoint.sh: Launching /docker-entrypoint.d/20-envsubst-on-templates.sh
/docker-entrypoint.sh: Configuration complete; ready for start up

Instalado e pronto para uso. Agora abrimos outro terminal para iniciar.

C:\Users\Aldo>curl http://localhost:8080
<!DOCTYPE html>
<html>
<head>
<title>Welcome to nginx!</title>
<style>
    body {
        width: 35em;
        margin: 0 auto;
        font-family: Tahoma, Verdana, Arial, sans-serif;
    }
</style>
</head>
<body>
<h1>Welcome to nginx!</h1>
<p>If you see this page, the nginx web server is successfully installed and
working. Further configuration is required.</p>

<p>For online documentation and support please refer to
<a href="http://nginx.org/">nginx.org</a>.<br/>
Commercial support is available at
<a href="http://nginx.com/">nginx.com</a>.</p>

<p><em>Thank you for using nginx.</em></p>
</body>
</html>
Retorna a página do nginx.

Podemos observar também pelo navegador, digitar: localhost:8080. Podemos também ver os processos ativos:

C:\Users\Aldo>docker container ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                  NAMES
990949bcdfe1        nginx               "/docker-entrypoint.…"   5 minutes ago       Up 5 minutes        0.0.0.0:8080->80/tcp   priceless_cerf

Para mapear diretórios para o container, iniciamos com o exemplo de uma pasta do computador Host para uma pasta do container.

C:\Users\Aldo>cd Desktop

C:\Users\Aldo\Desktop>mkdir curso-docker

C:\Users\Aldo\Desktop>

Navegamos até o Desktop e criamos uma pasta, agora navegamos até a pasta e criamos uma subpasta.
C:\Users\Aldo\Desktop>cd curso-docker

C:\Users\Aldo\Desktop\curso-docker>mkdir ex-volume

C:\Users\Aldo\Desktop\curso-docker>

Podemos sair da pasta e abrir o VScode para editar um arquivo:

C:\Users\Aldo\Desktop\curso-docker>cd ..

C:\Users\Aldo\Desktop>cd curso-docker

C:\Users\Aldo\Desktop\curso-docker>code.
'code.' não é reconhecido como um comando interno
ou externo, um programa operável ou um arquivo em lotes.

C:\Users\Aldo\Desktop\curso-docker>code .

C:\Users\Aldo\Desktop\curso-docker>

Ao digitarmos code .. voltamos uma pasta e abrimos o VScode na pasta anterior. Ao digitarmos 8080:80 qualquer pessoa que estiver 
de fora vai acessar pelo propria porta 8080. E o -v para mapear volumes, $(pwd)/not-found é uma pasta corrente e vai procurar 
uma pasta de volume chamada de not-found. incluímos: :/usr/share/mginx/html para parar de apontar para uma pasta do container 
para apontar para uma pasta no host da maquina. Finalizamos passando o nome da imagem a ser executada nginx.

C:\Users\Aldo\Desktop\curso-docker>docker container run -p 8080:80 -v $(pwd)/not-found:/usr/share/nginx/html nginx
docker: Error response from daemon: create $(pwd)/not-found: "$(pwd)/not-found" includes invalid characters for a local volume name,
only "[a-zA-Z0-9][a-zA-Z0-9_.-]" are allowed. If you intended to pass a host directory, use absolute path.
See 'docker run --help'.

C:\Users\Aldo\Desktop\curso-docker\ex-volume>docker container run -p 8080:80 -v $(pwd)/html:/usr/share/nginx/html nginx
docker: Error response from daemon: create $(pwd)/html: "$(pwd)/html" includes invalid characters for a local volume name, 
only "[a-zA-Z0-9][a-zA-Z0-9_.-]" are allowed. If you intended to pass a host directory, use absolute path.
See 'docker run --help'.

Rodar um servidor web em backgraound: executar o container em background, modo de uso do docker como um processo por exemplo:
servidor web, banco de dados, etc. Assim não temos a interatividade direto, assim usamos: -d modo dinamo, digitando o comando no 
terminal dentro da pasta.

docker container run -d --name ex-daemon-basic -p 8080:80 -v $(pwd)/html:/usr/share/nginx/html nginx

Para windows devemos trocar o $(pwd) por %cd%:

C:\Users\Aldo\Desktop\curso-docker\ex-volume>docker container run -p 8080:80 -v %cd%/not-found:/usr/share/nginx/html nginx
/docker-entrypoint.sh: /docker-entrypoint.d/ is not empty, will attempt to perform configuration
/docker-entrypoint.sh: Looking for shell scripts in /docker-entrypoint.d/
/docker-entrypoint.sh: Launching /docker-entrypoint.d/10-listen-on-ipv6-by-default.sh
10-listen-on-ipv6-by-default.sh: Getting the checksum of /etc/nginx/conf.d/default.conf
10-listen-on-ipv6-by-default.sh: Enabled listen on IPv6 in /etc/nginx/conf.d/default.conf
/docker-entrypoint.sh: Launching /docker-entrypoint.d/20-envsubst-on-templates.sh
/docker-entrypoint.sh: Configuration complete; ready for start up

Chamamos um arquivo html e pedimos para apontar para ele: direcionamos uma pasta do computador host para o container.

C:\Users\Aldo\Desktop\curso-docker\ex-volume>docker container run -p 8080:80 -v %cd%/html:/usr/share/nginx/html nginx
/docker-entrypoint.sh: /docker-entrypoint.d/ is not empty, will attempt to perform configuration
/docker-entrypoint.sh: Looking for shell scripts in /docker-entrypoint.d/
/docker-entrypoint.sh: Launching /docker-entrypoint.d/10-listen-on-ipv6-by-default.sh
10-listen-on-ipv6-by-default.sh: Getting the checksum of /etc/nginx/conf.d/default.conf
10-listen-on-ipv6-by-default.sh: Enabled listen on IPv6 in /etc/nginx/conf.d/default.conf
/docker-entrypoint.sh: Launching /docker-entrypoint.d/20-envsubst-on-templates.sh
/docker-entrypoint.sh: Configuration complete; ready for start up

C:\Users\Aldo\Desktop\curso-docker\ex-volume>
docker container run -d --name ex-daemon-basic -p 8080:80 -v %cd%/html:/usr/share/nginx/html nginx
0e3e2994e17d3e83cfcb56f2679c5cee2c9efa0a241ac3132ca4edaceba50311
Iniciou o container em modo backgraound.

C:\Users\Aldo\Desktop\curso-docker\ex-volume>docker container ps
CONTAINER ID        IMAGE               COMMAND                  CREATED              STATUS              PORTS                  NAMES
0e3e2994e17d        nginx               "/docker-entrypoint.…"   About a minute ago   Up About a minute   0.0.0.0:8080->80/tcp   ex-daemon-basic

Gerenciar container em modo backgraound:
C:\Users\Aldo\Desktop\curso-docker\ex-volume>docker container start ex-daemon-basic
ex-daemon-basic
Iniciamos o container

Para reiniciar o container:
C:\Users\Aldo\Desktop\curso-docker\ex-volume>docker container restart ex-daemon-basic
ex-daemon-basic

Para parar o container:
C:\Users\Aldo\Desktop\curso-docker\ex-volume>docker container stop ex-daemon-basic
ex-daemon-basic

Podemos usar também o container/ID: 0e3e2994e17d. Tem a mesma função no local do nome.














































